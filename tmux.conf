# Redefine PREFIX

unbind-key C-b
set-option -g prefix C-s
bind-key -r C-s send-prefix

#   ########
#
#   Keybindins
#
#   ########

# I had to dig this up from the tmux source? Going with long form everywher,
# but keeping this as a reference for future snippet translation
#
# |-------------------+------------|
# | tmux command      | short form |
# |-------------------+------------|
# | set-option        | set        |
# | set-window-option | setw       |
# | bind-key          | bind       |
# | unbind-key        | unbind     |
# | display-message   | display    |
# | run-shell         | run        |
# | if-shell          | if         |
# |-------------------+------------|


# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
# Tmux eats the 'M-h' command. I was trying to "send through" the M-h, but that
# wasn't being registered. I bound C-g C-h to the TmuxSelectPane command in vim,
# and this works as expected
# My suspicion is somehow the Meta mappings aren't doing what I want them to. I
# know the meta key is being respected in the terminal, verified the send-keys
# was triggering as expected
# Maybe the send-keys doesn't "pass through", and it just re-fires the command?
# In the end, it just does nothing - so that matches the behavior. In this case,
# I send through the key mappings to match the vim command
# This seems to be an issue with my vim reading the A-* or M-* keybindings
# For now, this is a valid workaround.
# https://vi.stackexchange.com/questions/9072/why-alt-key-mapping-not-working-in-vim-but-it-works-in-neovim
bind-key -n 'M-h' if-shell "$is_vim" 'send-keys C-g C-h'  'select-pane -L'
bind-key -n 'M-j' if-shell "$is_vim" 'send-keys C-g C-j'  'select-pane -D'
bind-key -n 'M-k' if-shell "$is_vim" 'send-keys C-g C-k'  'select-pane -U'
bind-key -n 'M-l' if-shell "$is_vim" 'send-keys C-g C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'M-\\' if-shell \"$is_vim\" 'send-keys C-g C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'M-\\' if-shell \"$is_vim\" 'send-keys C-g C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'M-h' select-pane -L
bind-key -T copy-mode-vi 'M-j' select-pane -D
bind-key -T copy-mode-vi 'M-k' select-pane -U
bind-key -T copy-mode-vi 'M-l' select-pane -R
bind-key -T copy-mode-vi 'M-\' select-pane -l

# resize commands
bind-key -n S-Left resize-pane -L 2
bind-key -n S-Right resize-pane -R 2
bind-key -n S-Down resize-pane -D 1
bind-key -n S-Up resize-pane -U 1

bind-key -n C-Left resize-pane -L 10
bind-key -n C-Right resize-pane -R 10
bind-key -n C-Down resize-pane -D 5
bind-key -n C-Up resize-pane -U 5

# prefix capital K will kill the current session and join the next open onk
bind-key K run-shell 'tmux switch-client -n \; kill-session -t \
  "$(tmux display-message -p "#S")" || tmux kill-session'

# prefix control b breaks current to new tmux session with tat
bind-key C-b send-keys 'tat && exit' 'C-m'

# opens a new slit with a dropdown of all sessions, select one to switch
bind-key C-j split-window -v "tmux list-sessions | sed -E 's/:.*$//' | \
  grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | \
  xargs tmux switch-client -t"

# turn the current pane into a new window, with content or without
bind-key b break-pane -d
bind-key c new-window -c '#{pane_current_path}'

# Copy options -
# Meta-C or use the mouse to create a selection
# mycopy alias defined in zshrc
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "pbcopy"
bind-key -T copy-mode-vi C-c send-keys -X copy-pipe "pbcopy"

# reload tmux.conf
bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

# Split keyboard shortcuts
bind-key - split-window -v -c '#{pane_current_path}'
bind-key \\ split-window -h -c '#{pane_current_path}'

#   ########
#
#   Options
#
#   ########

# on macos this resolves to xterm-256color. Despite the tmux docs suggesting I
# must use screen/tmux - this resolves all 256 colors as per the color script
# in bin/user
set-option -g default-terminal $TERM

# If $EDITOR or $VISUAL are set, the terminal will use vim keybindings. This
# restores terminal bindings to emacs. On MacOS, this seems to do nothing by
# default but it's something that may be set
set-option -g status-keys "emacs"

# "Color Scheme"
set-option -g status-bg 'white'
set-option -g status-fg 'black'
set-option -g window-status-current-style 'fg=white,bg=black'

# define status syntax
set-option -g status-left-length 100
set-option -g status-right-length 100
set-option -g status-left " [#S] "
set-option -g status-right "|#(tmux list-sessions | sed -E 's/:.*$//' | \
  grep -v \"^$(tmux display-message -p '#S')\$\" | cut -c 1-4 | tr '\\n' '|') \
  #(date '+%m/%d/%y %H:%M') "

set-option -g base-index 1
set-option -g renumber-windows on

set-option -g window-status-format '#I #{b:pane_current_path}#F'
set-option -g window-status-current-format ' #I #{b:pane_current_path}#F  '

set-option -g history-limit 30000

# enable mouse scrolling
set-option -g mouse on

# Use vim keybindings in copy mode
set-option -g mode-keys vi
# set-window-option -g mode-keys vi

